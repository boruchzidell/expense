#! /usr/bin/env ruby

require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def setup_schema
    result = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables 
      WHERE table_schema = 'public' AND table_name = 'expenses';
      SQL
    
    if result[0]["count"] == "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6,2) NOT NULL CHECK (amount >= 0.01),
          memo text NOT NULL,
          created_on date NOT NULL
        );
      SQL
    end
  end

  def display_count(result)
    count = result.ntuples
    if count > 0
      puts "There are #{count} expense#{"s" if count != 1}."
    else
      puts "There are no expenses."
    end
  end

  def display_expenses(result)
    total = 0.00

    result.each do |tuple|
      columns = [
        tuple["id"].rjust(3),
        tuple["created_on"].rjust(10),
        tuple["amount"].rjust(6), 
        tuple["memo"]
      ]
      puts columns.join(' | ')
      total += tuple["amount"].to_f

    end
    puts '-' * 50
    puts "Total" + "#{format('%.2f', total)}".rjust(20)  
    
  end

  def list_expenses
    result = @connection.exec('select * from expenses order by created_on ; ')
    
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def add_expense_error(amount, memo)
    unless amount && memo
      abort "You must provide an amount and memo."
    end
  end

  def add_expense(amount, memo)
    add_expense_error(amount, memo)

    sql = "INSERT INTO expenses (amount, memo) values ($1, $2)" 
    @connection.exec_params(sql, [amount, memo])
  end

  def search_expenses(term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1"
    result = @connection.exec_params(sql, ["%#{term}%"])
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def delete_expense(id)
    record = "SELECT * FROM expenses WHERE id = $1"
    results = @connection.exec_params(record, [id])

    if results.ntuples == 0
      puts "There is no expense with id #{id}."
    else
      delete_record = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(delete_record, [id])

      puts "The following expense has been deleted:"
      display_expenses(results)
    end
  end

  def nuclear
    @connection.exec("DELETE FROM expenses;")
    puts "All expenses have been deleted."
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def display_help
    puts <<~HEREDOC

      An expense recording system

      Commands:
      
      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete <NUMBER> - remove expense with id NUMBER
      search <QUERY> - list expenses with a matching memo field  

    HEREDOC
  end

  def run(args)
    command = args.shift

    case command
    when "list"
      @application.list_expenses
    when "add"
      @application.add_expense(args[0], args[1])
    when "search"
      @application.search_expenses(args[0])
    when "delete"
      @application.delete_expense(args[0])
    when "clear"
      puts "This is the nuclear option. Are you sure? (Y/N) "
      loop do
        response = STDIN.getch.downcase
        break if response == 'y'
        abort if response == 'n'
        puts "Please enter (Y/N)"
      end
      @application.nuclear
    else
      display_help
    end
  end
  
end

CLI.new.run(ARGV)
